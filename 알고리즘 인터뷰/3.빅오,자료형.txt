○빅오 : 입력값이 무한대로 향할 때 함수의 상한을 설명하는 수학적 표기방법
    - 시간복잡도를 표현 할 때에는 최고차항만 표현
        -> 4n^2 + 5n + 4 = O(n^2)
    ★ 빅오 표기법은 주어진(최선/최악/평균) 경우의 수행 시간의 상한을 나타냄


○시간 복잡도
    - O(1) : 입력값이 아무리 커도 실행시간이 일정함(ex.해시테이블)
    - O(log n) : 입력값에 영향을 받지만 매우큰 입력값에도 크게 영향을 받지 않는 편임(ex.이진검색)
    - O(n) : 입력값만큼 실행시간에 영향을 받고, 선형시간알고리즘이라고도함(ex.정렬되지않은 리스트에서 최대값 또는 최소값 찾기)
    - O(nlog n) : 병합 정렬같은 효율 좋은 알고리즘에 해당함
        -> 적어도 모든 수에 대해 한번 이상은 비교해야하는 비교 기반 정렬 알고리즘은 아무리 좋은 알고리즘이라고 해도 nlog n보다 빠를 수없음
        -> 대신 입력값이 최선의값일 경우 비교를 건너뛰고 바로 O(n)의 속도가 가능(ex.팀소트)
    - O(n^2) : 버블 정렬 같은 비효율 적인 알고리즘
    - O(2^n) : 피보나치 수를 재귀로 계산하는 알고리즘에 해당됨(2^n이 n^2보다 더 느림)
    - O(n!) : 가장 느린 알고리즘으로 입력값이 조금만 커져도 시간이 오래걸림
        -> ex.각 도시를 방문하고 돌아오는 가장 짧은 경로를 찾는 외판원문제(TSP)를 브루트포스로 풀이할 때

    - 시간효율이 좋은 알고리즘은 공간을 많이 차지하고 공간을 적게차지하는 알고리즘은 시간 효율이 좋지 않음
        -> 드물게 둘다 좋은 알고리즘이 있음

○분할 상환 분석
    - 시간 또는 메모리를 분석하는 알고리즘의 복잡도를 최악의경우만 보는게 비관적이기 때문에 나온 방법
    - 드물게 일어나는 경우의수 때문에 시간복잡도가 올라갔다면 그 최악의 경우의수를 여러번에 걸쳐 골고루 나눠줘서 계산하는 방법

○자료형
    - None
    - 숫자
        -> 정수형
            -> 정수, 불리언
        -> 실수
    - 집합형
        -> 집합
    - 매핑
        -> 딕셔너리
    - 시퀸스
        -> 불변
            - 문자열, 튜플, 바이트
        -> 가변
            - 리스트

    - 파이썬에서는 int를 임의정밀도로 취급하기때문에 long이 없고 오버플로가 발생하지않음(큰 숫자를 배열로 자릿수로 나눠서 저장함)
    - 불리언은 결국 1,0이기 때문에 정수형에 들어감
    - 매핑타입은 키와 자료형으로 구성된 복합자료형
    - 집합은 중복된 값을 갖지 않는 자료형
    - 문자열 시퀸스 같은 경우 불변임
        -> a = "abc" a = "def"로 바뀐것 같지만 a는 "def"를 새로 참조 한 것일 뿐 기존 a에 저장된 값이 바뀐게아님


○객체
    ★파이썬은 모든 것이 객체로 이루어져있음